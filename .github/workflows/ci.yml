name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
      
env:
  MAIN_PYTHON_VERSION: '3.10'

jobs:
  build-python:
    name: Build Python package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Run protolint
        uses: plexsystems/protolint-action@v0.7.0
        with:
          configDirectory: .

      - name: Install build requirements
        run: |
          pip install -U pip
          pip install build

      - name: Build
        run: python -m build

      - name: Install
        run: pip install dist/*.whl

      - name: Test import
        run: |
          mkdir tmp
          cd tmp
          python -c "import ansys.api.discovery.v1; print('Successfully imported ansys.api.discovery.v1')"
          python -c "from ansys.api.discovery import __version__; print(__version__)"

      - name: Upload packages
        uses: actions/upload-artifact@v3
        with:
          name: ansys-api-discovery-packages
          path: dist/
          retention-days: 7

  build-nuget:
    name: Build NuGet package (C# Build)
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.6

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install protobuf-compiler

    - name: Generate C# files from .proto files 
      run: |
        ./buildCSharp.sh

    # - name: Restore dependencies
    #   run: nuget restore $SOLUTION

    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: 3.1.x

    # - name: Build
    #   run: dotnet build $SOLUTION --configuration Release --no-restore

    # - name: Run tests
    #   run: dotnet test /p:Configuration=$env:Release --no-restore --no-build --verbosity normal

  release-python:
    name: Release Python packages
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-python]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      # uncomment the following section to permit upload to public PyPI

      # - name: Upload to Public PyPi
      #   run: |
      #     pip install twine
      #     twine upload --skip-existing ./**/*.whl
      #     twine upload --skip-existing ./**/*.tar.gz
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }} 

      - name: Upload to Private PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: PAT
          TWINE_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }} 
          TWINE_REPOSITORY_URL: https://pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/upload

      - name: Release Python package
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.pdf
