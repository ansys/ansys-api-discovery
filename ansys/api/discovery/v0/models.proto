// Copyright 2021, ANSYS Inc. Unauthorized use, distribution or duplication is prohibited.
syntax = "proto3";
package ansys.api.discovery.v0;
//import "ansys/api/discovery/v0/google/api/annotations.proto";
import "google/protobuf/struct.proto";
option csharp_namespace = "Ansys.Api.Discovery.V0";
option go_package = "ansys/api/discovery/v0";

//
// The type of curve.
enum CurveType {
  CURVETYPE_UNKNOWN = 0;
  CURVETYPE_LINE = 1;
  CURVETYPE_CIRCLE = 2;
  CURVETYPE_ELLIPSE = 3;
  CURVETYPE_NURBS = 4;
  CURVETYPE_PROCEDURAL = 5;
}

//
// The type of surface.
enum SurfaceType {
  SURFACETYPE_UNKNOWN = 0;
  SURFACETYPE_PLANE = 1;
  SURFACETYPE_CYLINDER = 2;
  SURFACETYPE_CONE = 3;
  SURFACETYPE_TORUS = 4;
  SURFACETYPE_SPHERE = 5;
  SURFACETYPE_NURBS = 6;
  SURFACETYPE_PROCEDURAL = 7;
}

//
// The type of dimension.
enum DimensionType {
  DIMENSIONTYPE_UNKNOWN = 0;
  DIMENSIONTYPE_LINEAR = 1;
  DIMENSIONTYPE_DIAMETRIC = 2;
  DIMENSIONTYPE_RADIAL = 3;
  DIMENSIONTYPE_ARC = 4;
  DIMENSIONTYPE_AREA = 5;
  DIMENSIONTYPE_VOLUME = 6;
  DIMENSIONTYPE_MASS = 7;
  DIMENSIONTYPE_ANGULAR = 8;
  DIMENSIONTYPE_COUNT = 9;
  DIMENSIONTYPE_UNITLESS = 10;
}

//
// A design edge.
message DesignEdge{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The curve type.
  // Output only.
  CurveType curve_type = 10                 [json_name = "curve_type"];
  // The display name of the owning design body.
  // Output only.
  string owner_display_name = 11              [json_name = "owner_display_name"];
  // The export identifier.
  // Output only.
  string export_id = 12                   [json_name = "export_id"];
  // The length of the design edge.
  // Output only.
  double length = 13;
}

//
// DesignEdgeView is used to select which fields to return for Get/List.
enum DesignEdgeView {
  // Unspecified.
  DESIGNEDGE_VIEW_UNSPECIFIED = 0;
  // Returns everything.
  DESIGNEDGE_VIEW_FULL = 1;
  // Returns the moniker only.
  DESIGNEDGE_VIEW_MONIKER = 2;
  // Returns basic information.
  DESIGNEDGE_VIEW_BASIC = 3;
}

//
// A design face.
message DesignFace{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The surface type.
  // Output only.
  SurfaceType surface_type = 10              [json_name = "surface_type"];
  // The display name of the owning design body.
  // Output only.
  string owner_display_name = 11             [json_name = "owner_display_name"];
  // The export identifier.
  // Output only.
  string export_id = 12                  [json_name = "export_id"];
  // The area of the design face.
  // Output only.
  double area = 13;
}

//
// DesignFaceView is used to select which fields to return for Get/List.
enum DesignFaceView {
  DESIGNFACE_VIEW_UNSPECIFIED = 0;
  DESIGNFACE_VIEW_FULL = 1;
  DESIGNFACE_VIEW_MONIKER = 2;
  DESIGNFACE_VIEW_BASIC = 3;
}

//
// A design mesh.
message DesignMesh{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The design mesh display name.
  string display_name=2 [json_name = "display_name"];
}

//
// A design body.
message DesignBody{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The design body display name.
  string display_name = 2               [json_name = "display_name"];
  // Indicates whether this design body can be suppressed.
  // Output only.
  bool can_suppress = 3                 [json_name = "can_suppress"];
  // Indicates whether this design body is deleted.
  // Output only.
  bool is_deleted = 4                 [json_name = "is_deleted"];
  // Indicates whether this design body is suppressed.
  // Output only.
  bool is_suppressed = 5                [json_name = "is_suppressed"];
  // The transformation to master space.
  // Output only.
  Matrix transform_to_master = 6            [json_name = "transform_to_master"];
  // Access to design body master properties.
  // Output only.
  DesignBodyMasterNullable master = 7;
}

//
// A nullable design body master.
message DesignBodyMasterNullable{
  oneof kind {
    // Null if the design body is not a master.
    google.protobuf.NullValue null = 1;
    // Access to design body master properties.
    DesignBodyMaster props = 2;
  }
}

//
// A design body master.
message DesignBodyMaster {
  // The update state.
  // Output only.
  string update_state = 6                [json_name = "update_state"];
  // The map of text attributes.
  // Output only.
  map< string, string > text_attributes = 7      [json_name = "text_attributes"];
  // The nmp of number attributes.
  // Output only.
  map< string, double > number_attributes = 8      [json_name = "number_attributes"];
  // The solid material.
  // Output only.
  Material material = 9;
  // The surface material.
  // Output only.
  Material surface_material = 10             [json_name = "surface_material"];
  // The shape information
  // Output only.
  Shape shape = 11;
  //
  // The material.
  message Material {
    // The material display name.
    // Output only.
    string display_name=1                [json_name = "display_name"];
  }
  //
  // The shape.
  message Shape {
    // Indicates if this is a surface body.
    // Output only.
    bool is_surface_body = 1               [json_name = "is_surface_body"];
    // The surface area.
    // Output only.
    double surface_area = 2              [json_name = "surface_area"];
    // The volume.
    // Output only.
    double volume = 3;
    // The bounding box size.
    // Output only.
    Direction bounding_box_size = 4          [json_name = "bounding_box_size"];
  }
}

//
// DesignBodyView is used to select which fields to return for Get/List.
enum DesignBodyView {
  DESIGNBODY_VIEW_UNSPECIFIED = 0;
  DESIGNBODY_VIEW_FULL = 1;
  DESIGNBODY_VIEW_MONIKER = 2;
  DESIGNBODY_VIEW_BASIC = 3;
}

//
// A component.
message Component{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2                [json_name = "display_name"];
  // The part occurrence for this component.
  // Output only.
  Part part_occurrence = 3                 [json_name = "part_occurrence"];
  // The placement matrix.
  // Output only.
  Matrix placement =4;
}

//
// ComponentView is used to select which fields to return for Get/List.
enum ComponentView {
  COMPONENT_VIEW_UNSPECIFIED = 0;
  COMPONENT_VIEW_FULL = 1;
  COMPONENT_VIEW_MONIKER = 2;
  COMPONENT_VIEW_BASIC = 3;
}

//
// A part.
message Part{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2                  [json_name = "display_name"];
}

//
// PartView is used to select which fields to return for Get/List.
enum PartView {
  PART_VIEW_UNSPECIFIED = 0;
  PART_VIEW_FULL = 1;
  PART_VIEW_MONIKER = 2;
  PART_VIEW_BASIC = 3;
}

//
// A named selection.
message NamedSelection {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2                  [json_name = "display_name"];
}

//
// NamedSelectionView is used to select which fields to return for Get/List.
enum NamedSelectionView {
  NAMEDSELECTION_VIEW_UNSPECIFIED = 0;
  NAMEDSELECTION_VIEW_FULL = 1;
  NAMEDSELECTION_VIEW_MONIKER = 2;
  NAMEDSELECTION_VIEW_BASIC = 3;
}

//
// A driving dimension.
message DrivingDimension {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2                  [json_name = "display_name"];
  // The type of driving dimension.
  // Output only.
  DimensionType dimension_type = 3             [json_name = "dimension_type"];
  // The value of the driving dimension.
  double dimension_value = 4                 [json_name = "dimension_value"];
}

//
// DrivingDimensionView is used to select which fields to return for Get/List.
enum DrivingDimensionView {
  DRIVINGDIMENSION_VIEW_UNSPECIFIED = 0;
  DRIVINGDIMENSION_VIEW_FULL = 1;
  DRIVINGDIMENSION_VIEW_MONIKER = 2;
  DRIVINGDIMENSION_VIEW_BASIC = 3;
}

//
// A design document.
message Document{
  string moniker = 1;
  bool is_complete=2                   [json_name = "is_complete"];
  bool is_locked=3                     [json_name = "is_locked"];
  bool is_modified=4                   [json_name = "is_modified"];
  bool is_removed = 5                  [json_name = "is_removed"];
  Part main_part=6                     [json_name = "main_part"];
  bool main_part_displays_file_name=7          [json_name = "main_part_displays_file_name"];
  string path = 10;
}

//
// DocumentView is used to select which fields to return for Get/List.
enum DocumentView {
  DOCUMENT_VIEW_UNSPECIFIED = 0;
  DOCUMENT_VIEW_FULL = 1;
  DOCUMENT_VIEW_MONIKER = 2;
  DOCUMENT_VIEW_BASIC = 3;
}

//
// A 3D coordinate system.
message CoordinateSystem{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 10                 [json_name = "display_name"];
  // The display name.
  Frame frame = 11;
}

//
// CoordinateSystemView is used to select which fields to return for Get/List.
enum CoordinateSystemView {
  COORDINATESYSTEM_VIEW_UNSPECIFIED = 0;
  COORDINATESYSTEM_VIEW_FULL = 1;
  COORDINATESYSTEM_VIEW_MONIKER = 2;
  COORDINATESYSTEM_VIEW_BASIC = 3;
}

//
// A 3D point.
message Point {
  double x = 1;
  double y = 2;
  double z = 3;
}

//
// A 3D direction.
message Direction {
  double x = 1;
  double y = 2;
  double z = 3;
}

//
// A 3D coordinate frame.
message Frame {
  Point origin = 1;
  Direction dir_x = 2                  [json_name = "dir_x"];
  Direction dir_y = 3                  [json_name = "dir_y"];
  Direction dir_z = 4                  [json_name = "dir_z"];
}

//
// A 3D box.
message Box {
  Point min = 1;
  Point max = 2;
}

//
// A homogeneous 3D transformation matrix.
// The matrix is a pre-multiplication transformation. 
// The rotation is in m00->m22 and contains no scaling in its leading diagonal.
// The translation is m03/m33, m13/m33, m23/m33.
// The uniform scale is 1/m33.
message Matrix{
  double m00 = 1;
  double m01 = 2;
  double m02 = 3;
  double m03 = 4;
  double m10 = 5;
  double m11 = 6;
  double m12 = 7;
  double m13 = 8;
  double m20 = 9;
  double m21 = 10;
  double m22 = 11;
  double m23 = 12;
  double m30 = 13;
  double m31 = 14;
  double m32 = 15;
  double m33 = 16;
}
//
// An history track parameter
message HistoryTrackParameter {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2                  [json_name = "display_name"];
  // The type of history track parameter.
  // Output only.
  DimensionType dimension_type = 3             [json_name = "dimension_type"];
  // The value of the history track parameter.
  double dimension_value = 4                 [json_name = "dimension_value"];
}

//
// HistoryTrackParameterView is used to select which fields to return for Get/List.
enum HistoryTrackParameterView {
  HISTORYTRACKPARAMETER_VIEW_UNSPECIFIED = 0;
  HISTORYTRACKPARAMETER_VIEW_FULL = 1;
  HISTORYTRACKPARAMETER_VIEW_MONIKER = 2;
  HISTORYTRACKPARAMETER_VIEW_BASIC = 3;
}

//
// An input parameter
message InputParameter {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The parent variation's identifier
  string parent_moniker = 2                 [json_name = "parent_moniker"];
  // The display name.
  string display_name = 3                 [json_name = "display_name"];
  // The type of physics parameter.
  QuantityType quantity_type = 4              [json_name = "quantity_type"];
  // The value of the output physics parameter.
  double quantity_value = 5                [json_name = "quantity_value"];
  // The value's unit
  int32 unit = 6                      [json_name = "unit"];
  // The value unit's abbreviation.
  string unit_abbreviation = 7;
}

//
// InputParameterView is used to select which fields to return for Get/List.
enum InputParameterView {
  INPUT_PARAMETER_VIEW_UNSPECIFIED = 0;
  INPUT_PARAMETER_VIEW_FULL = 1;
  INPUT_PARAMETER_VIEW_MONIKER = 2;
  INPUT_PARAMETER_VIEW_BASIC = 3;
}

//
// An output parameter
message OutputParameter {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The parent variation's identifier
  string parent_moniker = 2                 [json_name = "parent_moniker"];
  // The display name.
  string display_name = 3                  [json_name = "display_name"];
  // The type of parameter.
  QuantityType quantity_type = 4              [json_name = "quantity_type"];
  // The value of the output parameter.
  double quantity_value = 5                [json_name = "quantity_value"];
  // The value's unit
  int32 unit = 6                      [json_name = "unit"];
  // The value unit's abbreviation.
  string unit_abbreviation = 7;
}

//
// OutputParameterView is used to select which fields to return for Get/List.
enum OutputParameterView {
  OUTPUT_PARAMETER_VIEW_UNSPECIFIED = 0;
  OUTPUT_PARAMETER_VIEW_FULL = 1;
  OUTPUT_PARAMETER_VIEW_MONIKER = 2;
  OUTPUT_PARAMETER_VIEW_BASIC = 3;
}

//
// A script parameter
message ScriptParameter {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2                  [json_name = "display_name"];
  // The type of script parameter.
  DimensionType dimension_type = 3             [json_name = "dimension_type"];
  // The value of the script parameter.
  double dimension_value = 4                 [json_name = "dimension_value"];
}

//
// ScriptParameterView is used to select which fields to return for Get/List.
enum ScriptParameterView {
  SCRIPTPARAMETER_VIEW_UNSPECIFIED = 0;
  SCRIPTPARAMETER_VIEW_FULL = 1;
  SCRIPTPARAMETER_VIEW_MONIKER = 2;
  SCRIPTPARAMETER_VIEW_BASIC = 3;
}

//
// ShrinkWrapOptions is used to specify ShrinkWrap method in the Facet Tools. 
message ShrinkWrapOptions {
  // Gets or sets the maximum size of the facet in mm. 
  double size =2;
  //Gets or sets a value indicating whether to keep the original body or not.
  bool keep_original_bodies =3;
  // Gets or sets a value indicating whether to preserve features.
  bool preserve_features =4;
  // Gets or sets a value indicating whether to preserve features.
  double angle_tolerance =5;
  // Gets or sets a value indicating whether to preserve features.
  bool secondary_size_enabled =6;
  // Get or sets a value indicating secondary size
  double secondary_size = 7;
  // Gets or sets a value indicating whether to preserve features.
  bool max_size_enabled =8;
  // Get or sets a value indicating secondary size
  double max_size = 9;
  // Gets or sets a value indicating whether to preserve features.
  double curvature_angle =10;
  // Get or sets a value indicating secondary size
}

//
// A Variation (represents a row into the variation table)
message Variation {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2                   [json_name = "display_name"];
  // Starred status
  bool starred = 3                      [json_name = "starred"];
  // The type of script parameter.
  // Output only.
  repeated InputParameter inputs = 4            [json_name = "inputs"];
  // The value of the script parameter.
  repeated OutputParameter outputs = 5            [json_name = "outputs"];
}

//
// An input column (represents the same input parameter across all the variations )
message InputColumn {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2                   [json_name = "display_name"];
  // The range
  // Output only
  string range = 3;
  // The parameters
  repeated InputParameter parameter_variations= 4;
}

//
// An output column (represents the same output parameter across all the variations )
message OutputColumn {
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name.
  string display_name = 2                   [json_name = "display_name"];
  // The range
  // Output only
  string range = 3;
  // The parameters
  repeated OutputParameter parameter_variations= 4;
}

//
// Represents the quantity type for a physics parameter.
enum QuantityType {
  QUANTITY_TYPE_ACCELERATION=0;
  QUANTITY_TYPE_ANGLE=1;
  QUANTITY_TYPE_AREA=2;
  QUANTITY_TYPE_AREA_DENSITY=3;
  QUANTITY_TYPE_AREA_MOMENT_OF_INERTIA=4;
  QUANTITY_TYPE_CAPACITANCE=5;
  QUANTITY_TYPE_COEFFICIENT_OF_THERMAL_EXPANSION=6;
  QUANTITY_TYPE_DENSITY=7;
  QUANTITY_TYPE_DYNAMIC_VISCOSITY=8;
  QUANTITY_TYPE_ELECTRIC_ADMITTANCE=9;
  QUANTITY_TYPE_ELECTRIC_CHARGE=10;
  QUANTITY_TYPE_ELECTRIC_CHARGE_DENSITY=11;
  QUANTITY_TYPE_ELECTRIC_CONDUCTANCE=12;
  QUANTITY_TYPE_ELECTRIC_CONDUCTIVITY=13;
  QUANTITY_TYPE_ELECTRIC_CURRENT=14;
  QUANTITY_TYPE_ELECTRIC_CURRENT_DENSITY=15;
  QUANTITY_TYPE_ELECTRIC_CURRENT_GRADIENT=16;
  QUANTITY_TYPE_ELECTRIC_FIELD=17;
  QUANTITY_TYPE_ELECTRIC_INDUCTANCE=18;
  QUANTITY_TYPE_ELECTRIC_POTENTIAL=19;
  QUANTITY_TYPE_ELECTRIC_POTENTIAL_AC=20;
  QUANTITY_TYPE_ELECTRIC_POTENTIAL_CHANGE_RATE=21;
  QUANTITY_TYPE_ELECTRIC_POTENTIAL_DC=22;
  QUANTITY_TYPE_ELECTRIC_RESISTANCE=23;
  QUANTITY_TYPE_ELECTRIC_RESISTIVITY=24;
  QUANTITY_TYPE_ELECTRIC_SURFACE_CHARGE_DENSITY=25;
  QUANTITY_TYPE_ENERGY=26;
  QUANTITY_TYPE_ENTROPY=27;
  QUANTITY_TYPE_FORCE=28;
  QUANTITY_TYPE_FORCE_CHANGE_RATE=29;
  QUANTITY_TYPE_FORCE_PER_LENGTH=30;
  QUANTITY_TYPE_FREQUENCY=31;
  QUANTITY_TYPE_HEAT_FLUX=32;
  QUANTITY_TYPE_HEAT_TRANSFER_COEFFICIENT=33;
  QUANTITY_TYPE_INVERSE_AREA=34;
  QUANTITY_TYPE_INVERSE_LENGTH=35;
  QUANTITY_TYPE_KINEMATIC_VISCOSITY=36;
  QUANTITY_TYPE_LENGTH=37;
  QUANTITY_TYPE_MAGNETIC_FIELD=38;
  QUANTITY_TYPE_MASS=39;
  QUANTITY_TYPE_MASS_CONCENTRATION=40;
  QUANTITY_TYPE_MASS_FLOW=41;
  QUANTITY_TYPE_MASS_FLUX=42;
  QUANTITY_TYPE_MASS_FRACTION=43;
  QUANTITY_TYPE_MASS_MOMENT_OF_INERTIA=44;
  QUANTITY_TYPE_MOLARITY=45;
  QUANTITY_TYPE_MOLAR_MASS=46;
  QUANTITY_TYPE_PERMEABILITY=47;
  QUANTITY_TYPE_PERMITTIVITY=48;
  QUANTITY_TYPE_POWER=49;
  QUANTITY_TYPE_POWER_DENSITY=50;
  QUANTITY_TYPE_POWER_RATIO=51;
  QUANTITY_TYPE_PRESSURE=52;
  QUANTITY_TYPE_RATIO=53;
  QUANTITY_TYPE_RATIO_CHANGE_RATE=54;
  QUANTITY_TYPE_REACTIVE_ENERGY=55;
  QUANTITY_TYPE_REACTIVE_POWER=56;
  QUANTITY_TYPE_ROTATIONAL_ACCELERATION=57;
  QUANTITY_TYPE_ROTATIONAL_SPEED=58;
  QUANTITY_TYPE_ROTATIONAL_STIFFNESS=59;
  QUANTITY_TYPE_ROTATIONAL_STIFFNESS_PER_LENGTH=60;
  QUANTITY_TYPE_SOLID_ANGLE=61;
  QUANTITY_TYPE_SPECIFIC_ENERGY=62;
  QUANTITY_TYPE_SPECIFIC_ENTROPY=63;
  QUANTITY_TYPE_SPECIFIC_VOLUME=64;
  QUANTITY_TYPE_SPECIFIC_WEIGHT=65;
  QUANTITY_TYPE_SPEED=66;
  QUANTITY_TYPE_TEMPERATURE=67;
  QUANTITY_TYPE_TEMPERATURE_CHANGE_RATE=68;
  QUANTITY_TYPE_TEMPERATURE_DELTA=69;
  QUANTITY_TYPE_THERMAL_CONDUCTIVITY=70;
  QUANTITY_TYPE_THERMAL_RESISTANCE=71;
  QUANTITY_TYPE_TIME=72;
  QUANTITY_TYPE_TORQUE=73;
  QUANTITY_TYPE_TORQUE_PER_LENGTH=74;
  QUANTITY_TYPE_VOLUME=75;
  QUANTITY_TYPE_VOLUME_CONCENTRATION=76;
  QUANTITY_TYPE_VOLUME_FLOW=77;
  QUANTITY_TYPE_VOLUME_PER_LENGTH=78;
  QUANTITY_TYPE_WARPING_MOMENT_OF_INERTIA=79;
}

//
// A design curve.
message DesignCurve{
  // The moniker.
  // Output only.
  string moniker = 1;
  // The display name of the owning design body.
  // Output only.
  string owner_display_name = 2;
  // The length of the design edge.
  // Output only.
  double length = 3;
}

//
// Object type descriptor
enum EntityType{
  PART = 0;
  COMPONENT = 1;
  BODY = 2;
  NAMED_SELECTION = 3;
}
